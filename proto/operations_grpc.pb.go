// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/operations.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OperationsService_BuyByMarket_FullMethodName    = "/utbot.OperationsService/BuyByMarket"
	OperationsService_PositionReport_FullMethodName = "/utbot.OperationsService/PositionReport"
)

// OperationsServiceClient is the client API for OperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationsServiceClient interface {
	BuyByMarket(ctx context.Context, in *BuyByMarketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PositionReport(ctx context.Context, in *PositionReportRequest, opts ...grpc.CallOption) (OperationsService_PositionReportClient, error)
}

type operationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationsServiceClient(cc grpc.ClientConnInterface) OperationsServiceClient {
	return &operationsServiceClient{cc}
}

func (c *operationsServiceClient) BuyByMarket(ctx context.Context, in *BuyByMarketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OperationsService_BuyByMarket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsServiceClient) PositionReport(ctx context.Context, in *PositionReportRequest, opts ...grpc.CallOption) (OperationsService_PositionReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OperationsService_ServiceDesc.Streams[0], OperationsService_PositionReport_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &operationsServicePositionReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperationsService_PositionReportClient interface {
	Recv() (*PositionReportResponse, error)
	grpc.ClientStream
}

type operationsServicePositionReportClient struct {
	grpc.ClientStream
}

func (x *operationsServicePositionReportClient) Recv() (*PositionReportResponse, error) {
	m := new(PositionReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperationsServiceServer is the server API for OperationsService service.
// All implementations must embed UnimplementedOperationsServiceServer
// for forward compatibility
type OperationsServiceServer interface {
	BuyByMarket(context.Context, *BuyByMarketRequest) (*emptypb.Empty, error)
	PositionReport(*PositionReportRequest, OperationsService_PositionReportServer) error
	mustEmbedUnimplementedOperationsServiceServer()
}

// UnimplementedOperationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOperationsServiceServer struct {
}

func (UnimplementedOperationsServiceServer) BuyByMarket(context.Context, *BuyByMarketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyByMarket not implemented")
}
func (UnimplementedOperationsServiceServer) PositionReport(*PositionReportRequest, OperationsService_PositionReportServer) error {
	return status.Errorf(codes.Unimplemented, "method PositionReport not implemented")
}
func (UnimplementedOperationsServiceServer) mustEmbedUnimplementedOperationsServiceServer() {}

// UnsafeOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationsServiceServer will
// result in compilation errors.
type UnsafeOperationsServiceServer interface {
	mustEmbedUnimplementedOperationsServiceServer()
}

func RegisterOperationsServiceServer(s grpc.ServiceRegistrar, srv OperationsServiceServer) {
	s.RegisterService(&OperationsService_ServiceDesc, srv)
}

func _OperationsService_BuyByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServiceServer).BuyByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationsService_BuyByMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServiceServer).BuyByMarket(ctx, req.(*BuyByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationsService_PositionReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationsServiceServer).PositionReport(m, &operationsServicePositionReportServer{stream})
}

type OperationsService_PositionReportServer interface {
	Send(*PositionReportResponse) error
	grpc.ServerStream
}

type operationsServicePositionReportServer struct {
	grpc.ServerStream
}

func (x *operationsServicePositionReportServer) Send(m *PositionReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OperationsService_ServiceDesc is the grpc.ServiceDesc for OperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "utbot.OperationsService",
	HandlerType: (*OperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyByMarket",
			Handler:    _OperationsService_BuyByMarket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PositionReport",
			Handler:       _OperationsService_PositionReport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/operations.proto",
}
